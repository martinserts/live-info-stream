/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.betfair.esa.swagger.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * RunnerDefinition
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-10-07T12:34:48.137476+03:00[Europe/Riga]")
public class RunnerDefinition {
  @SerializedName("sortPriority")
  private Integer sortPriority = null;

  @SerializedName("removalDate")
  private OffsetDateTime removalDate = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("hc")
  private Double hc = null;

  @SerializedName("adjustmentFactor")
  private Double adjustmentFactor = null;

  @SerializedName("bsp")
  private Double bsp = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    WINNER("WINNER"),
    LOSER("LOSER"),
    REMOVED("REMOVED"),
    REMOVED_VACANT("REMOVED_VACANT"),
    HIDDEN("HIDDEN"),
    PLACED("PLACED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  public RunnerDefinition sortPriority(Integer sortPriority) {
    this.sortPriority = sortPriority;
    return this;
  }

   /**
   * Get sortPriority
   * @return sortPriority
  **/
  @Schema(description = "")
  public Integer getSortPriority() {
    return sortPriority;
  }

  public void setSortPriority(Integer sortPriority) {
    this.sortPriority = sortPriority;
  }

  public RunnerDefinition removalDate(OffsetDateTime removalDate) {
    this.removalDate = removalDate;
    return this;
  }

   /**
   * Get removalDate
   * @return removalDate
  **/
  @Schema(description = "")
  public OffsetDateTime getRemovalDate() {
    return removalDate;
  }

  public void setRemovalDate(OffsetDateTime removalDate) {
    this.removalDate = removalDate;
  }

  public RunnerDefinition id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Selection Id - the id of the runner (selection)
   * @return id
  **/
  @Schema(description = "Selection Id - the id of the runner (selection)")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public RunnerDefinition hc(Double hc) {
    this.hc = hc;
    return this;
  }

   /**
   * Handicap - the handicap of the runner (selection) (null if not applicable)
   * @return hc
  **/
  @Schema(description = "Handicap - the handicap of the runner (selection) (null if not applicable)")
  public Double getHc() {
    return hc;
  }

  public void setHc(Double hc) {
    this.hc = hc;
  }

  public RunnerDefinition adjustmentFactor(Double adjustmentFactor) {
    this.adjustmentFactor = adjustmentFactor;
    return this;
  }

   /**
   * Get adjustmentFactor
   * @return adjustmentFactor
  **/
  @Schema(description = "")
  public Double getAdjustmentFactor() {
    return adjustmentFactor;
  }

  public void setAdjustmentFactor(Double adjustmentFactor) {
    this.adjustmentFactor = adjustmentFactor;
  }

  public RunnerDefinition bsp(Double bsp) {
    this.bsp = bsp;
    return this;
  }

   /**
   * Get bsp
   * @return bsp
  **/
  @Schema(description = "")
  public Double getBsp() {
    return bsp;
  }

  public void setBsp(Double bsp) {
    this.bsp = bsp;
  }

  public RunnerDefinition status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunnerDefinition runnerDefinition = (RunnerDefinition) o;
    return Objects.equals(this.sortPriority, runnerDefinition.sortPriority) &&
        Objects.equals(this.removalDate, runnerDefinition.removalDate) &&
        Objects.equals(this.id, runnerDefinition.id) &&
        Objects.equals(this.hc, runnerDefinition.hc) &&
        Objects.equals(this.adjustmentFactor, runnerDefinition.adjustmentFactor) &&
        Objects.equals(this.bsp, runnerDefinition.bsp) &&
        Objects.equals(this.status, runnerDefinition.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sortPriority, removalDate, id, hc, adjustmentFactor, bsp, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunnerDefinition {\n");
    
    sb.append("    sortPriority: ").append(toIndentedString(sortPriority)).append("\n");
    sb.append("    removalDate: ").append(toIndentedString(removalDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    hc: ").append(toIndentedString(hc)).append("\n");
    sb.append("    adjustmentFactor: ").append(toIndentedString(adjustmentFactor)).append("\n");
    sb.append("    bsp: ").append(toIndentedString(bsp)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
