/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.betfair.esa.swagger.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * MarketFilter
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-10-07T12:34:48.137476+03:00[Europe/Riga]")
public class MarketFilter {
  @SerializedName("countryCodes")
  private List<String> countryCodes = null;

  /**
   * Gets or Sets bettingTypes
   */
  @JsonAdapter(BettingTypesEnum.Adapter.class)
  public enum BettingTypesEnum {
    ODDS("ODDS"),
    LINE("LINE"),
    RANGE("RANGE"),
    ASIAN_HANDICAP_DOUBLE_LINE("ASIAN_HANDICAP_DOUBLE_LINE"),
    ASIAN_HANDICAP_SINGLE_LINE("ASIAN_HANDICAP_SINGLE_LINE");

    private String value;

    BettingTypesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BettingTypesEnum fromValue(String text) {
      for (BettingTypesEnum b : BettingTypesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BettingTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BettingTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BettingTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BettingTypesEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("bettingTypes")
  private List<BettingTypesEnum> bettingTypes = null;

  @SerializedName("turnInPlayEnabled")
  private Boolean turnInPlayEnabled = null;

  @SerializedName("marketTypes")
  private List<String> marketTypes = null;

  @SerializedName("venues")
  private List<String> venues = null;

  @SerializedName("marketIds")
  private List<String> marketIds = null;

  @SerializedName("eventTypeIds")
  private List<String> eventTypeIds = null;

  @SerializedName("eventIds")
  private List<String> eventIds = null;

  @SerializedName("bspMarket")
  private Boolean bspMarket = null;

  @SerializedName("raceTypes")
  private List<String> raceTypes = null;

  public MarketFilter countryCodes(List<String> countryCodes) {
    this.countryCodes = countryCodes;
    return this;
  }

  public MarketFilter addCountryCodesItem(String countryCodesItem) {
    if (this.countryCodes == null) {
      this.countryCodes = new ArrayList<String>();
    }
    this.countryCodes.add(countryCodesItem);
    return this;
  }

   /**
   * Get countryCodes
   * @return countryCodes
  **/
  @Schema(description = "")
  public List<String> getCountryCodes() {
    return countryCodes;
  }

  public void setCountryCodes(List<String> countryCodes) {
    this.countryCodes = countryCodes;
  }

  public MarketFilter bettingTypes(List<BettingTypesEnum> bettingTypes) {
    this.bettingTypes = bettingTypes;
    return this;
  }

  public MarketFilter addBettingTypesItem(BettingTypesEnum bettingTypesItem) {
    if (this.bettingTypes == null) {
      this.bettingTypes = new ArrayList<BettingTypesEnum>();
    }
    this.bettingTypes.add(bettingTypesItem);
    return this;
  }

   /**
   * Get bettingTypes
   * @return bettingTypes
  **/
  @Schema(description = "")
  public List<BettingTypesEnum> getBettingTypes() {
    return bettingTypes;
  }

  public void setBettingTypes(List<BettingTypesEnum> bettingTypes) {
    this.bettingTypes = bettingTypes;
  }

  public MarketFilter turnInPlayEnabled(Boolean turnInPlayEnabled) {
    this.turnInPlayEnabled = turnInPlayEnabled;
    return this;
  }

   /**
   * Get turnInPlayEnabled
   * @return turnInPlayEnabled
  **/
  @Schema(description = "")
  public Boolean isTurnInPlayEnabled() {
    return turnInPlayEnabled;
  }

  public void setTurnInPlayEnabled(Boolean turnInPlayEnabled) {
    this.turnInPlayEnabled = turnInPlayEnabled;
  }

  public MarketFilter marketTypes(List<String> marketTypes) {
    this.marketTypes = marketTypes;
    return this;
  }

  public MarketFilter addMarketTypesItem(String marketTypesItem) {
    if (this.marketTypes == null) {
      this.marketTypes = new ArrayList<String>();
    }
    this.marketTypes.add(marketTypesItem);
    return this;
  }

   /**
   * Get marketTypes
   * @return marketTypes
  **/
  @Schema(description = "")
  public List<String> getMarketTypes() {
    return marketTypes;
  }

  public void setMarketTypes(List<String> marketTypes) {
    this.marketTypes = marketTypes;
  }

  public MarketFilter venues(List<String> venues) {
    this.venues = venues;
    return this;
  }

  public MarketFilter addVenuesItem(String venuesItem) {
    if (this.venues == null) {
      this.venues = new ArrayList<String>();
    }
    this.venues.add(venuesItem);
    return this;
  }

   /**
   * Get venues
   * @return venues
  **/
  @Schema(description = "")
  public List<String> getVenues() {
    return venues;
  }

  public void setVenues(List<String> venues) {
    this.venues = venues;
  }

  public MarketFilter marketIds(List<String> marketIds) {
    this.marketIds = marketIds;
    return this;
  }

  public MarketFilter addMarketIdsItem(String marketIdsItem) {
    if (this.marketIds == null) {
      this.marketIds = new ArrayList<String>();
    }
    this.marketIds.add(marketIdsItem);
    return this;
  }

   /**
   * Get marketIds
   * @return marketIds
  **/
  @Schema(description = "")
  public List<String> getMarketIds() {
    return marketIds;
  }

  public void setMarketIds(List<String> marketIds) {
    this.marketIds = marketIds;
  }

  public MarketFilter eventTypeIds(List<String> eventTypeIds) {
    this.eventTypeIds = eventTypeIds;
    return this;
  }

  public MarketFilter addEventTypeIdsItem(String eventTypeIdsItem) {
    if (this.eventTypeIds == null) {
      this.eventTypeIds = new ArrayList<String>();
    }
    this.eventTypeIds.add(eventTypeIdsItem);
    return this;
  }

   /**
   * Get eventTypeIds
   * @return eventTypeIds
  **/
  @Schema(description = "")
  public List<String> getEventTypeIds() {
    return eventTypeIds;
  }

  public void setEventTypeIds(List<String> eventTypeIds) {
    this.eventTypeIds = eventTypeIds;
  }

  public MarketFilter eventIds(List<String> eventIds) {
    this.eventIds = eventIds;
    return this;
  }

  public MarketFilter addEventIdsItem(String eventIdsItem) {
    if (this.eventIds == null) {
      this.eventIds = new ArrayList<String>();
    }
    this.eventIds.add(eventIdsItem);
    return this;
  }

   /**
   * Get eventIds
   * @return eventIds
  **/
  @Schema(description = "")
  public List<String> getEventIds() {
    return eventIds;
  }

  public void setEventIds(List<String> eventIds) {
    this.eventIds = eventIds;
  }

  public MarketFilter bspMarket(Boolean bspMarket) {
    this.bspMarket = bspMarket;
    return this;
  }

   /**
   * Get bspMarket
   * @return bspMarket
  **/
  @Schema(description = "")
  public Boolean isBspMarket() {
    return bspMarket;
  }

  public void setBspMarket(Boolean bspMarket) {
    this.bspMarket = bspMarket;
  }

  public MarketFilter raceTypes(List<String> raceTypes) {
    this.raceTypes = raceTypes;
    return this;
  }

  public MarketFilter addRaceTypesItem(String raceTypesItem) {
    if (this.raceTypes == null) {
      this.raceTypes = new ArrayList<String>();
    }
    this.raceTypes.add(raceTypesItem);
    return this;
  }

   /**
   * Get raceTypes
   * @return raceTypes
  **/
  @Schema(description = "")
  public List<String> getRaceTypes() {
    return raceTypes;
  }

  public void setRaceTypes(List<String> raceTypes) {
    this.raceTypes = raceTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketFilter marketFilter = (MarketFilter) o;
    return Objects.equals(this.countryCodes, marketFilter.countryCodes) &&
        Objects.equals(this.bettingTypes, marketFilter.bettingTypes) &&
        Objects.equals(this.turnInPlayEnabled, marketFilter.turnInPlayEnabled) &&
        Objects.equals(this.marketTypes, marketFilter.marketTypes) &&
        Objects.equals(this.venues, marketFilter.venues) &&
        Objects.equals(this.marketIds, marketFilter.marketIds) &&
        Objects.equals(this.eventTypeIds, marketFilter.eventTypeIds) &&
        Objects.equals(this.eventIds, marketFilter.eventIds) &&
        Objects.equals(this.bspMarket, marketFilter.bspMarket) &&
        Objects.equals(this.raceTypes, marketFilter.raceTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCodes, bettingTypes, turnInPlayEnabled, marketTypes, venues, marketIds, eventTypeIds, eventIds, bspMarket, raceTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketFilter {\n");
    
    sb.append("    countryCodes: ").append(toIndentedString(countryCodes)).append("\n");
    sb.append("    bettingTypes: ").append(toIndentedString(bettingTypes)).append("\n");
    sb.append("    turnInPlayEnabled: ").append(toIndentedString(turnInPlayEnabled)).append("\n");
    sb.append("    marketTypes: ").append(toIndentedString(marketTypes)).append("\n");
    sb.append("    venues: ").append(toIndentedString(venues)).append("\n");
    sb.append("    marketIds: ").append(toIndentedString(marketIds)).append("\n");
    sb.append("    eventTypeIds: ").append(toIndentedString(eventTypeIds)).append("\n");
    sb.append("    eventIds: ").append(toIndentedString(eventIds)).append("\n");
    sb.append("    bspMarket: ").append(toIndentedString(bspMarket)).append("\n");
    sb.append("    raceTypes: ").append(toIndentedString(raceTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
