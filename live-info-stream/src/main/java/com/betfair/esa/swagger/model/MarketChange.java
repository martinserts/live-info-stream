/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.betfair.esa.swagger.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
/**
 * MarketChange
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-10-07T12:34:48.137476+03:00[Europe/Riga]")
public class MarketChange {
  @SerializedName("rc")
  private List<RunnerChange> rc = null;

  @SerializedName("img")
  private Boolean img = null;

  @SerializedName("tv")
  private Double tv = null;

  @SerializedName("con")
  private Boolean con = null;

  @SerializedName("marketDefinition")
  private MarketDefinition marketDefinition = null;

  @SerializedName("id")
  private String id = null;

  public MarketChange rc(List<RunnerChange> rc) {
    this.rc = rc;
    return this;
  }

  public MarketChange addRcItem(RunnerChange rcItem) {
    if (this.rc == null) {
      this.rc = new ArrayList<RunnerChange>();
    }
    this.rc.add(rcItem);
    return this;
  }

   /**
   * Runner Changes - a list of changes to runners (or null if un-changed)
   * @return rc
  **/
  @Schema(description = "Runner Changes - a list of changes to runners (or null if un-changed)")
  public List<RunnerChange> getRc() {
    return rc;
  }

  public void setRc(List<RunnerChange> rc) {
    this.rc = rc;
  }

  public MarketChange img(Boolean img) {
    this.img = img;
    return this;
  }

   /**
   * Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)
   * @return img
  **/
  @Schema(description = "Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)")
  public Boolean isImg() {
    return img;
  }

  public void setImg(Boolean img) {
    this.img = img;
  }

  public MarketChange tv(Double tv) {
    this.tv = tv;
    return this;
  }

   /**
   * The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)
   * @return tv
  **/
  @Schema(description = "The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)")
  public Double getTv() {
    return tv;
  }

  public void setTv(Double tv) {
    this.tv = tv;
  }

  public MarketChange con(Boolean con) {
    this.con = con;
    return this;
  }

   /**
   * Conflated - have more than a single change been combined (or null if not conflated)
   * @return con
  **/
  @Schema(description = "Conflated - have more than a single change been combined (or null if not conflated)")
  public Boolean isCon() {
    return con;
  }

  public void setCon(Boolean con) {
    this.con = con;
  }

  public MarketChange marketDefinition(MarketDefinition marketDefinition) {
    this.marketDefinition = marketDefinition;
    return this;
  }

   /**
   * Get marketDefinition
   * @return marketDefinition
  **/
  @Schema(description = "")
  public MarketDefinition getMarketDefinition() {
    return marketDefinition;
  }

  public void setMarketDefinition(MarketDefinition marketDefinition) {
    this.marketDefinition = marketDefinition;
  }

  public MarketChange id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Market Id - the id of the market
   * @return id
  **/
  @Schema(description = "Market Id - the id of the market")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketChange marketChange = (MarketChange) o;
    return Objects.equals(this.rc, marketChange.rc) &&
        Objects.equals(this.img, marketChange.img) &&
        Objects.equals(this.tv, marketChange.tv) &&
        Objects.equals(this.con, marketChange.con) &&
        Objects.equals(this.marketDefinition, marketChange.marketDefinition) &&
        Objects.equals(this.id, marketChange.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rc, img, tv, con, marketDefinition, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketChange {\n");
    
    sb.append("    rc: ").append(toIndentedString(rc)).append("\n");
    sb.append("    img: ").append(toIndentedString(img)).append("\n");
    sb.append("    tv: ").append(toIndentedString(tv)).append("\n");
    sb.append("    con: ").append(toIndentedString(con)).append("\n");
    sb.append("    marketDefinition: ").append(toIndentedString(marketDefinition)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
